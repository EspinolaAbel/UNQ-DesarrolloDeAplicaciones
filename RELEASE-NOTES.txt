---------------------------------------------------------------------

TAG entrega1

---------------------------------------------------------------------

NEW FEATURES:

* SWAGGER-UI: integrado swagger 3 para documentación de endpoints en el path /api/swagger-ui/index.html
* SERVICIOS API-REST: Se implementaron nuevos endpoints
  - POST api/users
    Recibe un nuevo usuario, lo valida y lo crea en el sistema.
  - GET  api/users
    Retorna todos los usuarios creados en el sistema
  - GET  api/users/{id}
    Dado un id, retorna un usuario del sistema
  - GET  /cryptos/price/{symbol}
    Retona la cotización actual de la criptomoneda con el symbol dado
  - GET  /cryptos/price/{symbol}/24hs
    Retona las cotización de las últimas 24hs de la criptomoneda con el symbol dado.
    Las cotizaciones son devueltas en un array que contiene todas las cotizaciones de las últimas 24hs con una ventana de tiempo de
    15 minutos entre cotización y cotización
* Integración continua con Github Actions
* Integración con SonarCloud
* Integración continua con Heroku

NOTES:

* Están implementados y funcionando los ejercicios 1, 2 y 3 del trabajo práctico
* Se está usando una base de datos en memoria h2 para persistir datos de la aplicación. Estos datos se pierden durante el apagado o reinicio de la app
* Al ser deployada la aplicación se crean automaticamente 3 usuarios. Esto es a modo demo y solo sucede cuando está activo el perfil development
  en el application.yml

KNOWN ISSUES:

* spring-security está configurado y funcionando pero debido a problemas con la autenticación de usuarios ningún endpoint está segurizado en esta versión

---------------------------------------------------------------------

TAG entrega2y3

---------------------------------------------------------------------

NEW FEATURES:

* Modelo y lógica de negocio completados
* SWAGGER: Documentación de endpoints
* SERVICIOS API-REST: Se implementaron nuevos endpoints
  - POST 	/api/auth/login
    Obtención de token JWT para poder utilizar los endpoints segurizados de la aplicación
  - GET 	/api/cryptos/p2p/operations
    Obtener todas las operaciones activas de un usuario
  - GET 	/api/cryptos/p2p/operations/{opUUID}
    Obtener operacion por su UUID
  - POST 	/api/cryptos/p2p/advertisements
    Crear una nueva publicación
  - GET 	/api/cryptos/p2p/advertisements
    Obtener todas las publicaciones activas de un usuario
  - GET 	/api/cryptos/p2p/advertisements/{adUUID}
    Obtener publicación por su UUID
  - POST 	/api/cryptos/p2p/operations
    Crear una nueva operación de compra-venta
  - PATCH 	/api/cryptos/p2p/operations/{opUUID}/{updateStatus}
    Actualizar el estado de una operación mediante su UUID
  - GET 	/api/cryptos/p2p/operations/user-volume
    Obtener el volumen de operaciones de un usuario
* Auditoria de controllers con Spring AOP. Se loguea request y respuestas de los endpoints
* Spring security integrado con autenticación a través de token JWT
* Test unitario
* Test de integración con spring-boot y junit 5
* Test de arquitectura con archunit
* Implementación de cache para el guardado de las cotizaciones de cryptoactivos


NOTES:

* implementación finalizada de lógica de negocio y arquitectura de la aplicación

KNOWN ISSUES:

- sin issues encontrados